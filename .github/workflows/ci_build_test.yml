# This workflow will ensure that all changes to the goldenmaster are tested

name: Technology Template Build Test

on:
  pull_request:
    paths:
      - 'goldenmaster/**'
      - '.github/workflows/**'
    branches: [main]

jobs:
  cmake_build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { name: "CMake Windows Latest MSVC", os: windows-latest }
          - { name: "CMake Ubuntu Latest GCC", os: ubuntu-latest }
          - { name: "CMake macOS Latest Clang", os: macos-latest }
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.24.x'
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.5.2'
          cache: 'true'
          modules: qtwebsockets
      - name: Checkout QMqtt
        uses: actions/checkout@v3
        with:
          repository: qt/qtmqtt
          ref: '6.5.2'
      - name: Build qmktt
        working-directory: ${{ GITHUB_WORKSPACE}}/mqtt
        run: qmake -r 
             make 
             make install
      - name: Update path env on Windows for testing
        if: ${{ matrix.config.os == 'windows-latest'}}
        run: echo "$GITHUB_WORKSPACE/goldenmaster/build/bin/Debug/" >> $GITHUB_PATH
      - name: Run cmake build & test on Windows
        if: ${{ matrix.config.os == 'windows-latest'}}
        working-directory: goldenmaster
        env:
            CTEST_OUTPUT_ON_FAILURE: 1
        run: cmake -Bbuild -DBUILD_TESTING=ON -DCMAKE_INSTALL_PREFIX=tmp && cmake --build build/ && cmake --build build/ --target RUN_TESTS
      - name: Run cmake build & test on Linux/macOS
        if: ${{ matrix.config.os != 'windows-latest'}}
        working-directory: goldenmaster
        env:
            CTEST_OUTPUT_ON_FAILURE: 1
        run: cmake -Bbuild -DBUILD_TESTING=ON -DCMAKE_INSTALL_PREFIX=tmp && cmake --build build/ && cmake --build build/ --target test
