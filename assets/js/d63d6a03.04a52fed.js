"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[304],{8652:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(7294),r=a(4996);function i(e){let{src:t,caption:a}=e;return n.createElement("figure",{style:{padding:0}},n.createElement("img",{src:(0,r.Z)(t),alt:a}),n.createElement("figcaption",null,`Figure: ${a}`))}},451:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>k,frontMatter:()=>s,metadata:()=>d,toc:()=>m});var n=a(7462),r=(a(7294),a(3905)),i=a(814),o=a(7784),l=a(8652);const s={},p="Features",d={unversionedId:"features/features",id:"features/features",title:"Features",description:"This guide explains how to use the generated code, what are the available features and  their benefits.",source:"@site/docs/features/features.md",sourceDirName:"features",slug:"/features/",permalink:"/template-qtcpp/features/",draft:!1,editUrl:"https://github.com/apigear-io/template-qtcpp/edit/main/docs/features/features.md",tags:[],version:"current",lastUpdatedBy:"dphan10",lastUpdatedAt:1698742474,formattedLastUpdatedAt:"Oct 31, 2023",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Quick-Start",permalink:"/template-qtcpp/quickstart/"},next:{title:"API",permalink:"/template-qtcpp/features/api"}},u={},m=[{value:"Get started",id:"get-started",level:2},{value:"Code generation",id:"code-generation",level:3},{value:"Example API",id:"example-api",level:3},{value:"Features",id:"features-1",level:2},{value:"Core",id:"core",level:3},{value:"Extended",id:"extended",level:3},{value:"Folder structure",id:"folder-structure",level:2}],c={toc:m},h="wrapper";function k(e){let{components:t,...a}=e;return(0,r.kt)(h,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"features"},"Features"),(0,r.kt)("p",null,"This guide explains how to use the generated code, what are the available features and  their benefits."),(0,r.kt)("h2",{id:"get-started"},"Get started"),(0,r.kt)("p",null,"This template generates code for ",(0,r.kt)("a",{parentName:"p",href:"https://www.qt.io/"},(0,r.kt)("em",{parentName:"a"},"Qt"))," projects. In order to successfully compile and use the code, you need to have the ",(0,r.kt)("em",{parentName:"p"},"Qt Engine")," installed (at least 5.12). Check ",(0,r.kt)("a",{parentName:"p",href:"https://www.qt.io/download"},"the Qt website")," for your options for open-source or commercial version.\nBasic understanding of ",(0,r.kt)("em",{parentName:"p"},"Qt")," is required, and depending on your goal the qml or c++ knowledge is also necessary."),(0,r.kt)("h3",{id:"code-generation"},"Code generation"),(0,r.kt)("p",null,"Follow the documentation for the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.apigear.io/docs/start/first_steps"},"code generation")," in general and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.apigear.io/docs/cli/generate"},"CLI")," or the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.apigear.io/docs/category/desktop-studio"},"Studio")," tools.\nOr try first the ",(0,r.kt)("a",{parentName:"p",href:"/template-qtcpp/quickstart/"},"quick start guide")," which shows how to prepare api and generate code out of it."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"For questions regarding this template please go to our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/orgs/apigear-io/discussions"},"discussions page"),". For feature requests or bug reports please use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/apigear-io/template-qtcpp/issues"},"issue tracker"),".")),(0,r.kt)("h3",{id:"example-api"},"Example API"),(0,r.kt)("p",null,"The following code snippet contains the ",(0,r.kt)("em",{parentName:"p"},"API")," which is used throughout this guide to demonstrate the generated code and its usege in ",(0,r.kt)("em",{parentName:"p"},"Qt"),"."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Hello World API (click to expand)"),(0,r.kt)(i.Z,{language:"yaml",showLineNumbers:!0,mdxType:"CodeBlock"},o.Z)),(0,r.kt)("h2",{id:"features-1"},"Features"),(0,r.kt)("h3",{id:"core"},"Core"),(0,r.kt)("p",null,"Features generate a view model for the ",(0,r.kt)("inlineCode",{parentName:"p"},"api"),". This can be used to implement a working ",(0,r.kt)("em",{parentName:"p"},"C++")," and ",(0,r.kt)("em",{parentName:"p"},"qml")," service and directly use it in your UI project."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/template-qtcpp/features/api"},"api")," - generates compilable abstract base interface and a basic implementation for data types"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/template-qtcpp/features/stubs"},"stubs")," - adds a basic stubs for the ",(0,r.kt)("inlineCode",{parentName:"li"},"api"),", you'll get classes that can actually be instantiated"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/template-qtcpp/features/qmlplugin"},"qmlplugin")," - generates plugin which can be used to add the qml types")),(0,r.kt)("h3",{id:"extended"},"Extended"),(0,r.kt)("p",null,"Features can be used in combination with ",(0,r.kt)("inlineCode",{parentName:"p"},"api")," and add more functionality on top, like the simulation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/template-qtcpp/features/olink"},"olink")," - provides a client and server adapters for each interface, that can be connected to any of the other technology templates with support for ",(0,r.kt)("a",{parentName:"li",href:"https://docs.apigear.io/objectlink/"},"ObjectLink"),". Use this feature to connect with ApiGear simulation tools."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/template-qtcpp/features/monitor"},"monitor")," - generates a middleware layer which logs all API events to the ",(0,r.kt)("a",{parentName:"li",href:"https://docs.apigear.io/docs/category/command-line"},"CLI")," or the ",(0,r.kt)("a",{parentName:"li",href:"https://docs.apigear.io/docs/category/desktop-studio"},"Studio")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/template-qtcpp/features/mqtt"},"MQTT")," experimental - provides minimal working adapters for MQTT client and service side for each interfaces. Check also MQTT in other technology templates that supports it."),(0,r.kt)("li",{parentName:"ul"},"examples feature - generates:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"olinkserver")," example with ",(0,r.kt)("inlineCode",{parentName:"li"},"main.cpp")," that shows your services in olink server."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"olinkclient")," example with ",(0,r.kt)("inlineCode",{parentName:"li"},"main.cpp")," that shows your interfaces as olink client."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"qml")," example with a ",(0,r.kt)("inlineCode",{parentName:"li"},"main.cpp")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"qmlmain.qml"),". The qml uses your interfaces. The main cpp sets olink client factory as a backend for the qml and sets up the olink server with your services (normally you'd have separate app for server)'.")))),(0,r.kt)(l.Z,{caption:"Use a subset of shown features for UI application.",src:"/img/features/featuresApp.png",mdxType:"Figure"}),(0,r.kt)(l.Z,{caption:"Features that may be used for server application.",src:"/img/features/featuresServer.png",mdxType:"Figure"}),(0,r.kt)("p",null,"There is also an ",(0,r.kt)("em",{parentName:"p"},"internal")," feature ",(0,r.kt)("inlineCode",{parentName:"p"},"apigear"),", which is generated for the ",(0,r.kt)("em",{parentName:"p"},"extended")," features and is explained with them.\nEach feature can be selected using the solution file or via command line tool."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("em",{parentName:"p"},"Features are case sensitive, make sure to always ",(0,r.kt)("strong",{parentName:"em"},"use lower-case.")," "))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("em",{parentName:"p"},"meta")," feature ",(0,r.kt)("inlineCode",{parentName:"p"},"all")," enables all specified features of the template. If you want to see the full extent of the generated code ",(0,r.kt)("inlineCode",{parentName:"p"},"all")," is easiest solution.\nPlease note, ",(0,r.kt)("inlineCode",{parentName:"p"},"all")," is part of the code generator and not explicitly used within templates.")),(0,r.kt)("h2",{id:"folder-structure"},"Folder structure"),(0,r.kt)("p",null,"This graph shows the full folder structure which is generated for ",(0,r.kt)("inlineCode",{parentName:"p"},"all")," features enabled. Generated features are encapsulated in separate folders inside the module folder, here ",(0,r.kt)("inlineCode",{parentName:"p"},"io_world")," or for the common features like ",(0,r.kt)("inlineCode",{parentName:"p"},"examples")," and the internal helper feature ",(0,r.kt)("inlineCode",{parentName:"p"},"apigear"),", a level above, in the ",(0,r.kt)("inlineCode",{parentName:"p"},"generation layer")," level, here ",(0,r.kt)("inlineCode",{parentName:"p"},"qt_hello_world"),". For more details visit the documentation for each feature.\nA ",(0,r.kt)("inlineCode",{parentName:"p"},"thirdparty")," folder is contains Qt Promise (up to 5.x.x Qt version)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\ud83d\udcc2hello-world\n \u2523 \ud83d\udcc2apigear\n \u2503 \u2523 \ud83d\udcdchelloworld.solution.yaml\n \u2503 \u2517 \ud83d\udcdchelloworld.module.yaml\n \u2523 \ud83d\udcc2qt_hello_world\n \u2503 \u2523 \ud83d\udcc2apigear\n \u2503 \u2523 \ud83d\udcc2examples\n \u2503 \u2503 \u2523 \ud83d\udcc2olinkclient\n \u2503 \u2503 \u2523 \ud83d\udcc2olinkserver\n \u2503 \u2503 \u2523 \ud83d\udcc2qml\n # highlight-next-line\n \u2503 \u2523 \ud83d\udcc2io_world\n \u2503 \u2503 \u2523 \ud83d\udcc2api\n \u2503 \u2503 \u2523 \ud83d\udcc2implementation\n \u2503 \u2503 \u2523 \ud83d\udcc2monitor\n \u2503 \u2503 \u2523 \ud83d\udcc2olink\n \u2503 \u2503 \u2517 \ud83d\udcc2plugin\n \u2503 \u2523 \ud83d\udcc2thirdparty\n \u2503 \u2517 \ud83d\udcdcCMakeLists.txt\n")))}k.isMDXComponent=!0}}]);