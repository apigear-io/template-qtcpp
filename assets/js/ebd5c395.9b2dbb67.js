"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[78],{2807:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>m});var n=a(7462),i=(a(7294),a(3905)),r=a(814),l=a(7784);const s={sidebar_position:1},p="API",o={unversionedId:"features/api",id:"features/api",title:"API",description:"The feature api is the bare minimum for the code generation. What you receive is:",source:"@site/docs/features/api.md",sourceDirName:"features",slug:"/features/api",permalink:"/template-qtcpp/features/api",draft:!1,editUrl:"https://github.com/apigear-io/template-qtcpp/edit/main/docs/features/api.md",tags:[],version:"current",lastUpdatedBy:"dphan10",lastUpdatedAt:1693991262,formattedLastUpdatedAt:"Sep 6, 2023",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Features",permalink:"/template-qtcpp/features/"},next:{title:"Stubs",permalink:"/template-qtcpp/features/stubs"}},u={},m=[{value:"File overview for module",id:"file-overview-for-module",level:3},{value:"Api",id:"api-1",level:3},{value:"Enums",id:"enums",level:4},{value:"Structs",id:"structs",level:4},{value:"Interfaces",id:"interfaces",level:4},{value:"Other",id:"other",level:3}],c={toc:m},d="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(d,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"api"},"API"),(0,i.kt)("p",null,"The feature ",(0,i.kt)("inlineCode",{parentName:"p"},"api")," is the bare minimum for the code generation. What you receive is:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"abstract ",(0,i.kt)("inlineCode",{parentName:"li"},"QObject")," base class for each ",(0,i.kt)("em",{parentName:"li"},"interface")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"enums")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"structs")," with a basic implementation")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"To use the your API in ",(0,i.kt)("inlineCode",{parentName:"p"},"QML")," directly see the ",(0,i.kt)("a",{parentName:"p",href:"/template-qtcpp/features/qmlplugin"},"plugin")," feature which adds QML wrappers and factory implementation for interfaces, factories for structures and creates a module plugin for the api types.")),(0,i.kt)("h3",{id:"file-overview-for-module"},"File overview for module"),(0,i.kt)("p",null,"With an example API"),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Hello World API (click to expand)"),(0,i.kt)(r.Z,{language:"yaml",showLineNumbers:!0,mdxType:"CodeBlock"},l.Z)),(0,i.kt)("p",null,"the following file structure will be generated. The purpose and content of each file is explained below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:"{7}","{7}":!0},"\ud83d\udcc2hello-world\n \u2523 \ud83d\udcc2apigear\n \u2523 \ud83d\udcc2qt_hello_world\n \u2503 \u2523 \ud83d\udcc2apigear\n \u2503 \u2523 \ud83d\udcc2examples\n \u2503 \u2523 \ud83d\udcc2io_world\n \u2503 \u2503 \u2523 \ud83d\udcc2api\n \u2503 \u2503 \u2503  \u2523 \ud83d\udcdcapi.cpp\n \u2503 \u2503 \u2503  \u2523 \ud83d\udcdcapi.h\n \u2503 \u2503 \u2503  \u2523 \ud83d\udcdciapifactory.h\n \u2503 \u2503 \u2503  \u2523 \ud83d\udcdcjson.adapter.h\n \u2503 \u2503 \u2503  \u2517 \ud83d\udcdcCMakeLists.txt\n ...\n")),(0,i.kt)("h3",{id:"api-1"},"Api"),(0,i.kt)("p",null,"Files ",(0,i.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdcapi.h")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdcapi.cpp")," contain the api: interfaces, data structures and enums."),(0,i.kt)("h4",{id:"enums"},"Enums"),(0,i.kt)("p",null,"Each enum is exposed to qml and their metatype is declared with ",(0,i.kt)("inlineCode",{parentName:"p"},"Q_DECLARE_METATYPE"),".\nFor convenience of use each enum has:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"toEnum")," function converts given ",(0,i.kt)("inlineCode",{parentName:"li"},"quint8")," to enum value."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"QDataSteram")," in and out operators for the enum.")),(0,i.kt)("h4",{id:"structs"},"Structs"),(0,i.kt)("p",null,"Each struct has its fields exposed for qml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp",metastring:'title="api.h"',title:'"api.h"'},"...\nstruct IO_WORLD_API_EXPORT Message\n{\n    Q_GADGET\n    Q_PROPERTY(QString content MEMBER m_content )\n...\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"We generate the import/export statements (here IO_WORLD_API_EXPORT) for all the classes and structs that have an implementation in a ",(0,i.kt)("em",{parentName:"p"},"cpp")," file and may be used outside of the library.")),(0,i.kt)("p",null,"For convenience of use each structure has:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"equality comparison operators"),(0,i.kt)("li",{parentName:"ul"},"the ",(0,i.kt)("inlineCode",{parentName:"li"},"QDataSteram")," in and out operators for the generated struct ",(0,i.kt)("inlineCode",{parentName:"li"},"Message"),".")),(0,i.kt)("p",null,"The struct metatype is declared with ",(0,i.kt)("inlineCode",{parentName:"p"},"Q_DECLARE_METATYPE"),". That may not be enough if you want to bind to fields of the struct in qml. In that case we suggest using a ",(0,i.kt)("a",{parentName:"p",href:"/template-qtcpp/features/qmlplugin"},"plugin")," which provides factory for it. "),(0,i.kt)("h4",{id:"interfaces"},"Interfaces"),(0,i.kt)("p",null,"Base interface version for Qt template is a QObject Abstract base class, here ",(0,i.kt)("inlineCode",{parentName:"p"},"AbstractHello"),". ",(0,i.kt)("br",null),"\nIt contains:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a pure virtual ",(0,i.kt)("inlineCode",{parentName:"li"},"getters")," and a ",(0,i.kt)("inlineCode",{parentName:"li"},"setters")," for each property")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"   virtual void setLast(const Message& last) = 0;\n   virtual Message last() const = 0;\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"pure virtual functions for each operation")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual int say(const Message& msg, When::WhenEnum when) = 0;\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"signals: for each api signal and for each api property - on property changed signal")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"signals:\n    void justSaid(const Message& msg);\n    void lastChanged(const Message& last);\n")),(0,i.kt)("h3",{id:"other"},"Other"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdc CMakeLists.txt")," for building this module, describing it's dependencies, and exposing built package for other features that will use it.\n",(0,i.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdc json.adapter.h")," prepares adapters for structs to easy read from or write to ",(0,i.kt)("inlineCode",{parentName:"p"},"nlohmann::json")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Message message = json.get<Message>();\nnlohmann::json message = message;\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"\ud83d\udcdciapifactory.h")," provides an interface for ApiFactory which can produce your interface instances, here the ",(0,i.kt)("inlineCode",{parentName:"p"},"AbstractHello")," instance. It's purpose is to provide the chosen implementation to a QML wrappers.\nThe factory main implementation is provided by the ",(0,i.kt)("a",{parentName:"p",href:"/template-qtcpp/features/qmlplugin"},"qmlplugin"),", which explains its purpose and usage in details.\nYou can also find implementation of factory interface in ",(0,i.kt)("a",{parentName:"p",href:"stubs"},"stubs"),", ",(0,i.kt)("a",{parentName:"p",href:"/template-qtcpp/features/monitor"},"monitor")," and ",(0,i.kt)("a",{parentName:"p",href:"/template-qtcpp/features/olink"},"olink")," features. They all allow creating different ",(0,i.kt)("inlineCode",{parentName:"p"},"AbstractHello")," backend for QML wrapper."))}h.isMDXComponent=!0}}]);