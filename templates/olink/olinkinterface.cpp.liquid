{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
{{ module | licGPLcpp -}}
{% assign class = interface.name |prepend:"OLink"-%}


#include "{{class|lower}}.h"

#include "../api/agent.h"
#include "../api/json.adapter.h"
#include <QtCore>

using namespace ApiGear;

{{class}}::{{class}}(QObject *parent)
    : Abstract{{interface.name}}(parent)
{% for property in interface.properties %}
    , m_{{property.name}}({{property|qtDefault}})
{% endfor %}
    , m_isReady(false)
    , m_node(nullptr)
{        
    qDebug() << Q_FUNC_INFO;
    m_node = ClientRegistry::get().addObjectSink(this);
}

{{class}}::~{{class}}()
{
    ClientRegistry::get().removeObjectSink(this);
}

void {{class}}::applyState(const json& fields) 
{
    qDebug() << Q_FUNC_INFO;
{% for property in interface.properties %}
    if(fields.contains("{{property.name}}")) {
        set{{property.name|capital}}Local(fields["{{property.name}}"].get<{{property | qtReturn}}>());
    }
{% endfor %}
}

{% for property in interface.properties %}
{% assign name = property.name %}

void {{class}}::set{{name|capital}}({{property|qtParam}})
{
    qDebug() << Q_FUNC_INFO;
    if(!m_node) {
        return;
    }
    m_node->setRemoteProperty("{{module}}.{{interface}}/{{property}}", {{property}});
}

void {{class}}::set{{name|capital}}Local({{property|qtParam}})
{
    qDebug() << Q_FUNC_INFO;
    if (m_{{name}} != {{name}}) {
        m_{{name}} = {{name}};
        emit {{name}}Changed({{name}});
        {{interface.name}}Agent::trace_state(this);
    }
}

{{property|qtReturn}} {{class}}::{{name}}() const
{
    return m_{{name}};
}

{% endfor %}


{% for operation in interface.operations %}
{% capture returnType %}{{operation|qtReturn}}{% endcapture %}

{{returnType}} {{class}}::{{operation.name}}({{operation|qtParams}})
{
    qDebug() << Q_FUNC_INFO;
    if(!m_node) {
        return {{operation|qtDefault}};
    }
    {% if operation.type == 'void' %}
    InvokeReplyFunc func = [this](InvokeReplyArg arg) {};
    const json &args = json::array({
        {{ operation.params | map: 'name' | join: ', ' }}
    });
    m_node->invokeRemote("{{module.name|identifier}}.{{interface}}/{{operation}}", args, func);
    {% else %}
    {{returnType}} value{ {{operation|qtDefault}} };
    {{operation.name}}Async({{ operation.params | map: 'name' | join: ', ' }})
        .then([&]({{returnType}} result) {
            value = result;
        })
        .wait();
    return value;
    {% endif %}
}

QtPromise::QPromise<{{returnType}}> {{class}}::{{operation.name}}Async({{operation|qtParams}})
{
    qDebug() << Q_FUNC_INFO;
    if(!m_node) {
        return QtPromise::QPromise<{{returnType}}>::reject("not initialized");
    }
    {% if operation.type == 'void' %}
    m_node->invokeRemote("{{module}}.{{interface}}/{{operation}}", json::array({
            {%- for param in operation.params -%}
                {{param}}{% unless forloop.last %},{% endunless -%}
            {%- endfor -%}}));
    return QtPromise::QPromise<void>::resolve();
    {% else %}
    return QtPromise::QPromise<{{returnType}}>{[&](
        const QtPromise::QPromiseResolve<{{returnType}}>& resolve) {
            m_node->invokeRemote("{{module}}.{{interface}}/{{operation}}", json::array({
            {%- for param in operation.params -%}
                {{param}}{% unless forloop.last %},{% endunless -%}
            {%- endfor -%}}), [resolve](InvokeReplyArg arg) {                
                const {{returnType}}& value = arg.value.get<{{returnType}}>();
                resolve(value);
            });
        }
    };
    {% endif %}
}

{% endfor %}


std::string {{class}}::olinkObjectName()
{
    return "{{module}}.{{interface}}";
}

void {{class}}::olinkOnSignal(std::string name, json args)
{
    qDebug() << Q_FUNC_INFO << QString::fromStdString(name);
    std::string path = Name::pathFromName(name);
{% for signal in interface.signals %}
    if(path == "{{signal}}") {
        emit {{signal}}(
{%- for param in signal.params -%}
        args[{{forloop.index0}}].get<{{param|qtReturn}}>(){% unless forloop.last %},{% endunless -%}
{%- endfor -%}
        );   
        return;
    }
{% endfor %}
}

void {{class}}::olinkOnPropertyChanged(std::string name, json value)
{
    qDebug() << Q_FUNC_INFO << QString::fromStdString(name);
    std::string path = Name::pathFromName(name);
    applyState({ {path, value} });
}
void {{class}}::olinkOnInit(std::string name, json props, IClientNode *node)
{
    qDebug() << Q_FUNC_INFO << QString::fromStdString(name);
    m_isReady = true;
    m_node = node;
    applyState(props);
    emit isReady();
}

void {{class}}::olinkOnRelease()
{
    qDebug() << Q_FUNC_INFO;
    m_isReady = false;
    m_node = nullptr;
}


